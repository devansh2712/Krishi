pragma solidity ^0.4.17;

contract campaign{
    struct Request{
        string description;
        uint value;
        address recipient;
        bool complete;
        uint approvalCount;
        mapping(address => bool) approvals;
    }
    Request[] public requests;
    address public manager;
    uint public minimumcontribution;
    
    mapping(address => bool) public approvers; 
    
    modifier retricted(){
        require(msg.sender == manager);
        _;
        
    }
    
    function campaign(uint minimum) public{
        manager = msg.sender;
        minimumcontribution = minimum;
    }
    function contribute() public payable{
        require(msg.value > minimumcontribution);
        approvers[msg.sender] = true;
    }
    function createrequest (string description, uint value, address recipient) public retricted{
     Request memory newrequest = Request({
        description: description,
        value: value,
        recipient: recipient,
        complete: false,
        approvalCount : 0
     });
     requests.push(newrequest);
    }
         
         function approveRequest(uint index) public{
             
             Request storage request = requests[index];
             
             require(approvers[msg.sender]);
             require(!request.approvals[msg.sender]);
             
             request.approvals[msg.sender] = true;
             request.approvalCount++;
         }
    
}
